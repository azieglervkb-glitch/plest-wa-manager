version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: whatsapp-manager-db
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-adminpassword}
      MONGO_INITDB_DATABASE: whatsapp_manager
    ports:
      - "${MONGO_PORT:-27017}:27017"
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - whatsapp-network

  # Redis f√ºr Caching und Sessions
  redis:
    image: redis:7-alpine
    container_name: whatsapp-manager-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redispassword}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - whatsapp-network

  # Hauptanwendung
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: whatsapp-manager-app
    restart: unless-stopped
    depends_on:
      - mongodb
      - redis
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://admin:${MONGO_PASSWORD:-adminpassword}@mongodb:27017/whatsapp_manager?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD:-redispassword}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      SERVER_ID: ${SERVER_ID:-main-server}

      # WhatsApp-spezifische Einstellungen
      PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: 'true'
      PUPPETEER_EXECUTABLE_PATH: /usr/bin/google-chrome-stable

      # Rate-Limiting
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-60000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}

      # Session-Konfiguration
      SESSION_SECRET: ${SESSION_SECRET:-your-session-secret}

    ports:
      - "${APP_PORT:-5000}:5000"
    volumes:
      - whatsapp_sessions:/app/sessions
      - whatsapp_profiles:/app/browser-profiles
      - whatsapp_logs:/app/logs
      - whatsapp_uploads:/app/uploads
    networks:
      - whatsapp-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Load Balancer (Nginx)
  nginx:
    image: nginx:alpine
    container_name: whatsapp-manager-nginx
    restart: unless-stopped
    depends_on:
      - app
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - whatsapp-network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: whatsapp-manager-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - whatsapp-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: whatsapp-manager-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana-dashboard.json:/etc/grafana/provisioning/dashboards/dashboard.json:ro
    networks:
      - whatsapp-network

  # Log-Aggregation - ELK Stack (Optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: whatsapp-manager-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - whatsapp-network
    deploy:
      resources:
        limits:
          memory: 1G

  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.0
    container_name: whatsapp-manager-kibana
    restart: unless-stopped
    depends_on:
      - elasticsearch
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    networks:
      - whatsapp-network

  # Backup Service
  backup:
    image: mongo:6.0
    container_name: whatsapp-manager-backup
    restart: "no"
    depends_on:
      - mongodb
    environment:
      MONGO_HOST: mongodb
      MONGO_PORT: 27017
      MONGO_USER: admin
      MONGO_PASSWORD: ${MONGO_PASSWORD:-adminpassword}
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-30}
    volumes:
      - ./docker/backup.sh:/backup.sh:ro
      - whatsapp_backups:/backups
    command: ["sh", "-c", "chmod +x /backup.sh && /backup.sh"]
    networks:
      - whatsapp-network

  # Health Check Service
  health-check:
    image: curlimages/curl:latest
    container_name: whatsapp-manager-health
    restart: unless-stopped
    depends_on:
      - app
    command: |
      sh -c "
        while true; do
          if curl -f http://app:5000/api/health; then
            echo '[Health Check] Service ist gesund'
          else
            echo '[Health Check] Service ist nicht erreichbar'
          fi
          sleep 30
        done
      "
    networks:
      - whatsapp-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  whatsapp_sessions:
    driver: local
  whatsapp_profiles:
    driver: local
  whatsapp_logs:
    driver: local
  whatsapp_uploads:
    driver: local
  whatsapp_backups:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  whatsapp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16