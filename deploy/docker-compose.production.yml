version: '3.8'

services:
  # WhatsApp Manager Application
  whatsapp-manager:
    build:
      context: ..
      dockerfile: deploy/Dockerfile.production
    container_name: whatsapp-manager-app
    restart: always
    ports:
      - "127.0.0.1:5000:5000"
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://whatsapp-user:${MONGODB_PASSWORD}@mongodb:27017/whatsapp_production
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - MAX_INSTANCES_PER_SERVER=100
    volumes:
      - whatsapp_sessions:/opt/whatsapp-manager/sessions
      - whatsapp_profiles:/opt/whatsapp-manager/browser-profiles
      - whatsapp_logs:/opt/whatsapp-manager/logs
      - whatsapp_backups:/opt/whatsapp-manager/backups
      - /dev/shm:/dev/shm # Shared memory f√ºr Chrome
    depends_on:
      - mongodb
      - redis
    networks:
      - whatsapp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: whatsapp-manager-mongodb
    restart: always
    ports:
      - "127.0.0.1:27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=whatsapp_production
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./mongodb-init.js:/docker-entrypoint-initdb.d/init.js:ro
    networks:
      - whatsapp-network
    command: mongod --auth --bind_ip_all
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: whatsapp-manager-redis
    restart: always
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - whatsapp-network
    command: redis-server --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: whatsapp-manager-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-docker.conf:/etc/nginx/conf.d/default.conf:ro
      - nginx_logs:/var/log/nginx
      - letsencrypt_certs:/etc/letsencrypt
      - letsencrypt_webroot:/var/www/certbot
    depends_on:
      - whatsapp-manager
    networks:
      - whatsapp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Let's Encrypt Certbot
  certbot:
    image: certbot/certbot
    container_name: whatsapp-manager-certbot
    volumes:
      - letsencrypt_certs:/etc/letsencrypt
      - letsencrypt_webroot:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email admin@${DOMAIN} --agree-tos --no-eff-email -d ${DOMAIN}

  # Prometheus (optional monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: whatsapp-manager-prometheus
    restart: unless-stopped
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - whatsapp-network

  # Grafana (optional dashboard)
  grafana:
    image: grafana/grafana:latest
    container_name: whatsapp-manager-grafana
    restart: unless-stopped
    ports:
      - "127.0.0.1:3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - whatsapp-network

volumes:
  whatsapp_sessions:
    driver: local
  whatsapp_profiles:
    driver: local
  whatsapp_logs:
    driver: local
  whatsapp_backups:
    driver: local
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  letsencrypt_certs:
    driver: local
  letsencrypt_webroot:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  whatsapp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16